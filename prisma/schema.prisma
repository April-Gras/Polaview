generator client {
  provider = "prisma-client-js"
}

datasource db {
  url      = env("DATABASE_URL")
  provider = "postgres"
}

model User {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  passwordHash String
  name         String
  isAdmin      Boolean   @default(false)
  isActive     Boolean   @default(false)
  sessions     Session[]
}

model Session {
  id         String   @id @unique @default(uuid())
  user       User     @relation(references: [id], fields: [userId])
  userId     Int
  lastAccess DateTime @default(now())
}

model ImdbSearch {
  imdbId              String           @id @unique
  name                String
  thumbnailUrl        String?
  imdbSearchCache     ImdbSearchCache? @relation(fields: [imdbSearchCacheTerm], references: [term])
  imdbSearchCacheTerm String
}

model ImdbSearchCache {
  term    String       @id @unique
  results ImdbSearch[]
}

model Title {
  imdbId          String            @id @unique
  createdOn       DateTime          @default(now())
  episodeNumber   Int
  File            File[]
  name            String
  pictureUrl      String?
  releaseYear     Int?
  season          Season?           @relation(fields: [seasonId], references: [id])
  seasonId        String?
  storyline       String?
  titleOnCast     TitleOnCast[]
  titleOnDirector TitleOnDirector[]
  titleOnRole     TitleOnRole[]
  titleOnWriter   TitleOnWriter[]
}

model Role {
  imdbId       String         @id @unique
  name         String
  titleOnRole  TitleOnRole[]
  personOnRole PersonOnRole[]
}

model TitleOnRole {
  title   Title  @relation(fields: [titleId], references: [imdbId])
  titleId String
  role    Role   @relation(fields: [roleId], references: [imdbId])
  roleId  String

  @@id([titleId, roleId])
}

model Person {
  imdbId          String            @id @unique
  name            String
  pictureUrl      String?
  titleOnCast     TitleOnCast[]
  titleOnWriter   TitleOnWriter[]
  titleOnDirector TitleOnDirector[]
  personOnRole    PersonOnRole[]
}

model PersonOnRole {
  person   Person @relation(fields: [personId], references: [imdbId])
  personId String
  role     Role   @relation(fields: [roleId], references: [imdbId])
  roleId   String

  @@id([personId, roleId])
}

model TitleOnWriter {
  title    Title  @relation(fields: [titleId], references: [imdbId])
  titleId  String
  person   Person @relation(fields: [personId], references: [imdbId])
  personId String

  @@id([titleId, personId])
}

model TitleOnDirector {
  title    Title  @relation(fields: [titleId], references: [imdbId])
  titleId  String
  person   Person @relation(fields: [personId], references: [imdbId])
  personId String

  @@id([titleId, personId])
}

model TitleOnCast {
  title    Title  @relation(fields: [titleId], references: [imdbId])
  titleId  String
  person   Person @relation(fields: [personId], references: [imdbId])
  personId String

  @@id([titleId, personId])
}

model Serie {
  imdbId     String   @id @unique
  createdOn  DateTime @default(now())
  seasons    Season[]
  pictureUrl String?
  storyline  String?
  name       String
}

model Season {
  id          String  @id @unique
  episodes    Title[]
  serie       Serie   @relation(fields: [serieImdbId], references: [imdbId])
  serieImdbId String
}

model FileSource {
  path      String   @id @unique
  files     File[]
  createdOn DateTime @default(now())
  updatedOn DateTime @default(now())
}

model File {
  id             Int         @id @unique @default(autoincrement())
  path           String      @unique
  fileSource     FileSource? @relation(fields: [fileSourcePath], references: [path])
  fileSourcePath String?
  title          Title       @relation(fields: [titleImdbId], references: [imdbId])
  titleImdbId    String
}
