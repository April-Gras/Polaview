generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  url      = env("DATABASE_URL")
  provider = "postgres"
}

model User {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  passwordHash String
  name         String
  isAdmin      Boolean   @default(false)
  isActive     Boolean   @default(false)
  sessions     Session[]
}

model Session {
  id         String   @id @unique @default(uuid())
  user       User     @relation(references: [id], fields: [userId])
  userId     Int
  lastAccess DateTime @default(now())
}

model ImdbSearch {
  imdbId              String           @id @unique
  name                String
  thumbnailUrl        String?
  imdbSearchCache     ImdbSearchCache? @relation(fields: [imdbSearchCacheTerm], references: [term])
  imdbSearchCacheTerm String
}

model ImdbSearchCache {
  term    String       @id @unique
  results ImdbSearch[]
}

model Title {
  imdbId          String            @id @unique
  createdOn       DateTime          @default(now())
  episodeNumber   Int
  File            File[]
  name            String
  pictureUrl      String?
  releaseYear     Int?
  season          Season?           @relation(fields: [seasonId], references: [id])
  seasonId        String?
  storyline       String?
  titleOnCast     TitleOnCast[]
  titleOnDirector TitleOnDirector[]
  titleOnWriter   TitleOnWriter[]
  roles           Role[]
}

model Role {
  imdbId       String  @id @unique
  name         String
  pictureUrl   String?
  title        Title   @relation(fields: [titleImdbId], references: [imdbId])
  person       Person  @relation(fields: [personImdbId], references: [imdbId])
  titleImdbId  String
  personImdbId String
}

model Person {
  imdbId          String            @id @unique
  name            String
  pictureUrl      String?
  titleOnCast     TitleOnCast[]
  titleOnWriter   TitleOnWriter[]
  titleOnDirector TitleOnDirector[]
  roles           Role[]
}

model TitleOnWriter {
  title    Title  @relation(fields: [titleId], references: [imdbId])
  titleId  String
  person   Person @relation(fields: [personId], references: [imdbId])
  personId String

  @@id([titleId, personId])
}

model TitleOnDirector {
  title    Title  @relation(fields: [titleId], references: [imdbId])
  titleId  String
  person   Person @relation(fields: [personId], references: [imdbId])
  personId String

  @@id([titleId, personId])
}

model TitleOnCast {
  title    Title  @relation(fields: [titleId], references: [imdbId])
  titleId  String
  person   Person @relation(fields: [personId], references: [imdbId])
  personId String

  @@id([titleId, personId])
}

model Serie {
  imdbId     String   @id @unique
  createdOn  DateTime @default(now())
  seasons    Season[]
  pictureUrl String?
  storyline  String?
  name       String
}

model Season {
  id          String  @id @unique
  episodes    Title[]
  serie       Serie   @relation(fields: [serieImdbId], references: [imdbId])
  serieImdbId String
}

model FileSource {
  path      String   @id @unique
  files     File[]
  createdOn DateTime @default(now())
  updatedOn DateTime @default(now())
}

model File {
  id             Int         @id @unique @default(autoincrement())
  path           String      @unique
  fileSource     FileSource? @relation(fields: [fileSourcePath], references: [path])
  fileSourcePath String?
  title          Title       @relation(fields: [titleImdbId], references: [imdbId])
  titleImdbId    String
}

// THE TVDB Update
model Biography {
  text     String
  lang     String
  People   People @relation(fields: [peopleId], references: [id])
  peopleId Int

  @@id([lang, peopleId])
}

model People {
  id            Int             @id @unique
  name          String
  biography     Biography[]
  birth         String?
  birthPlace    String?
  death         String?
  movieOnCast   MovieOnCast[]
  episodeOnCast EpisodeOnCast[]
  Character     Character[]
}

model Character {
  id        Int      @id @unique
  name      String
  image     String
  people    People   @relation(fields: [peopleId], references: [id])
  peopleId  Int
  movie     Movie?   @relation(fields: [movieId], references: [id])
  episode   Episode? @relation(fields: [episodeId], references: [id])
  movieId   Int?
  episodeId Int?
}

model Movie {
  id          Int           @id @unique
  name        String
  year        Int
  image       String
  file        FileV2?       @relation(fields: [fileV2Id], references: [id])
  fileV2Id    Int?          @unique
  movieOnCast MovieOnCast[]
  characters  Character[]
}

model Episode {
  id            Int             @id @unique
  season        SeasonV2        @relation(fields: [seasonId], references: [id])
  seasonId      Int
  SerieV2       SerieV2?        @relation(fields: [serieId], references: [id])
  serieId       Int?
  FileV2        FileV2?         @relation(fields: [fileV2Id], references: [id])
  fileV2Id      Int?            @unique
  episodeOnCast EpisodeOnCast[]
  characters    Character[]
}

model EpisodeOnCast {
  episode   Episode @relation(fields: [episodeId], references: [id])
  episodeId Int
  people    People  @relation(fields: [peopleId], references: [id])
  peopleId  Int

  @@id([episodeId, peopleId])
}

model MovieOnCast {
  movie    Movie  @relation(fields: [movieId], references: [id])
  movieId  Int
  people   People @relation(fields: [peopleId], references: [id])
  peopleId Int

  @@id([movieId, peopleId])
}

model Entity {
  movieId Int? @default(0)
  serieId Int? @default(0)
  order   Int
  List    List @relation(fields: [listId], references: [id])
  listId  Int  @id @unique
}

model List {
  id         Int      @id @unique
  entities   Entity[]
  image      String
  name       String
  isOfficial Boolean
}

model SeasonV2 {
  id      Int       @id @unique
  episode Episode[]
  serie   SerieV2?  @relation(fields: [serieId], references: [id])
  serieId Int?
}

model SerieV2 {
  id       Int        @id @unique
  seasons  SeasonV2[]
  episodes Episode[]
}

model FileSourceV2 {
  path      String   @id @unique
  files     FileV2[]
  createdOn DateTime @default(now())
  updatedOn DateTime @default(now())
}

model FileV2 {
  id               Int          @id @unique @default(autoincrement())
  path             String       @unique
  fileSource       FileSourceV2 @relation(fields: [fileSourceV2Path], references: [path])
  fileSourcePath   String?
  fileSourceV2Path String
  movie            Movie?
  episode          Episode?
}

model SearchResult {
  name            String
  image_url       String
  id              String
  SearchCache     SearchCache @relation(fields: [searchCacheTerm], references: [term])
  searchCacheTerm String      @id @unique
}

model SearchCache {
  term    String         @id @unique
  results SearchResult[]
}
