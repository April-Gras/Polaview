generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  url      = env("DATABASE_URL")
  provider = "postgres"
}

model User {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  passwordHash String
  name         String
  isAdmin      Boolean   @default(false)
  isActive     Boolean   @default(false)
  sessions     Session[]
}

model Session {
  id         String   @id @unique @default(uuid())
  user       User     @relation(references: [id], fields: [userId])
  userId     Int
  lastAccess DateTime @default(now())
}

model Biography {
  text     String
  lang     String
  People   People @relation(fields: [peopleId], references: [id])
  peopleId Int

  @@id([lang, peopleId])
}

model People {
  id                Int                 @id @unique
  name              String
  biography         Biography[]
  birth             String?
  birthPlace        String?
  death             String?
  // TODO Country
  image             String?
  characters        Character[]
  movieOnCast       MovieOnCast[]
  movieOnDirector   MovieOnDirector[]
  movieOnWriter     MovieOnWriter[]
  episodeOnCast     EpisodeOnCast[]
  episodeOnDirector EpisodeOnDirector[]
  episodeOnWriter   EpisodeOnWriter[]
}

model Character {
  id        Int      @id @unique
  name      String
  image     String?
  people    People   @relation(fields: [peopleId], references: [id])
  peopleId  Int
  movie     Movie?   @relation(fields: [movieId], references: [id])
  episode   Episode? @relation(fields: [episodeId], references: [id])
  movieId   Int?
  episodeId Int?
}

model MovieOverviewTranslation {
  movieId Int
  lang    String
  text    String
  movie   Movie  @relation(fields: [movieId], references: [id])

  @@id([movieId, lang])
}

model Movie {
  id              Int                        @id @unique
  characters      Character[]
  createdOn       DateTime                   @default(now())
  files           FileV2[]
  image           String?
  movieOnCast     MovieOnCast[]
  movieOnDirector MovieOnDirector[]
  movieOnWriter   MovieOnWriter[]
  name            String
  overviews       MovieOverviewTranslation[]
  year            Int?
}

model EpisodeOverviewTranslation {
  episodeId Int
  lang      String
  text      String
  episode   Episode @relation(fields: [episodeId], references: [id])

  @@id([episodeId, lang])
}

model Episode {
  id                Int                          @id @unique
  characters        Character[]
  episodeOnCast     EpisodeOnCast[]
  episodeOnDirector EpisodeOnDirector[]
  episodeOnWriter   EpisodeOnWriter[]
  overviews         EpisodeOverviewTranslation[]
  files             FileV2[]
  image             String?
  name              String
  number            Int
  season            SeasonV2?                    @relation(fields: [seasonId], references: [id])
  seasonId          Int?
  serie             SerieV2?                     @relation(fields: [serieId], references: [id])
  serieId           Int?
  year              Int?
}

model MovieOnCast {
  movie    Movie  @relation(fields: [movieId], references: [id])
  movieId  Int
  people   People @relation(fields: [peopleId], references: [id])
  peopleId Int

  @@id([peopleId, movieId])
}

model MovieOnDirector {
  movie    Movie  @relation(fields: [movieId], references: [id])
  movieId  Int
  people   People @relation(fields: [peopleId], references: [id])
  peopleId Int

  @@id([peopleId, movieId])
}

model MovieOnWriter {
  movie    Movie  @relation(fields: [movieId], references: [id])
  movieId  Int
  people   People @relation(fields: [peopleId], references: [id])
  peopleId Int

  @@id([peopleId, movieId])
}

model EpisodeOnCast {
  episode   Episode @relation(fields: [episodeId], references: [id])
  episodeId Int
  people    People  @relation(fields: [peopleId], references: [id])
  peopleId  Int

  @@id([peopleId, episodeId])
}

model EpisodeOnDirector {
  episode   Episode @relation(fields: [episodeId], references: [id])
  episodeId Int
  people    People  @relation(fields: [peopleId], references: [id])
  peopleId  Int

  @@id([peopleId, episodeId])
}

model EpisodeOnWriter {
  episode   Episode @relation(fields: [episodeId], references: [id])
  episodeId Int
  people    People  @relation(fields: [peopleId], references: [id])
  peopleId  Int

  @@id([peopleId, episodeId])
}

model Entity {
  movieId Int? @default(0)
  serieId Int? @default(0)
  order   Int
  List    List @relation(fields: [listId], references: [id])
  listId  Int  @id @unique
}

model List {
  id         Int      @id @unique
  entities   Entity[]
  image      String?
  name       String
  isOfficial Boolean
}

model SeasonV2 {
  id       Int       @id @unique
  number   Int
  image    String?
  episodes Episode[]
  serie    SerieV2?  @relation(fields: [serieId], references: [id])
  serieId  Int?
}

model SerieOverviewTranslation {
  serieId Int
  lang    String
  text    String
  serieV2 SerieV2 @relation(fields: [serieId], references: [id])

  @@id([serieId, lang])
}

model SerieV2 {
  id        Int                        @id @unique
  createdOn DateTime                   @default(now())
  episodes  Episode[]
  name      String
  overview  String?
  seasons   SeasonV2[]
  image     String?
  updatedOn DateTime                   @default(now())
  overviews SerieOverviewTranslation[]
}

model FileSourceV2 {
  path      String   @id @unique
  files     FileV2[]
  createdOn DateTime @default(now())
  updatedOn DateTime @default(now())
}

model SubtitleTrack {
  id       Int    @unique @default(autoincrement())
  path     String @unique
  fileV2   FileV2 @relation(fields: [fileV2Id], references: [id])
  fileV2Id Int

  @@id([path, fileV2Id])
}

model FileV2 {
  id               Int             @unique
  path             String          @unique
  subtitleTracks   SubtitleTrack[]
  fileSource       FileSourceV2    @relation(fields: [fileSourceV2Path], references: [path])
  fileSourceV2Path String
  movie            Movie?          @relation(fields: [movieId], references: [id])
  episode          Episode?        @relation(fields: [episodeId], references: [id])
  movieId          Int?
  episodeId        Int?

  @@id([id, path])
}

model SearchResult {
  name                      String
  image_url                 String?
  id                        String                      @id @unique
  searchResultOnSearchCache SearchResultOnSearchCache[]
  entityAddtionRequest      EntityAddtionRequest[]
}

model SearchResultOnSearchCache {
  searchResult    SearchResult @relation(fields: [searchResultId], references: [id])
  searchResultId  String
  searchCache     SearchCache  @relation(fields: [searchCacheTerm, searchCacheType], references: [term, type])
  searchCacheType String
  searchCacheTerm String

  @@id([searchCacheTerm, searchResultId])
}

model SearchCache {
  term                      String
  type                      String
  SearchResultOnSearchCache SearchResultOnSearchCache[]

  @@id([term, type])
}

model EntityAddtionRequest {
  id              Int          @id @unique @default(autoincrement())
  upvoteUserIds   Int[]
  createdByUserId Int
  searchResult    SearchResult @relation(fields: [searchResultId], references: [id])
  status          String
  createdOn       DateTime     @default(now())
  updatedOn       DateTime     @default(now())
  searchResultId  String
}
